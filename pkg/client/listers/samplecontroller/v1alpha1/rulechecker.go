/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "github.com/endocode/kelefstis/pkg/apis/samplecontroller/v1alpha1"
)

// RuleCheckerLister helps list RuleCheckers.
type RuleCheckerLister interface {
	// List lists all RuleCheckers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.RuleChecker, err error)
	// RuleCheckers returns an object that can list and get RuleCheckers.
	RuleCheckers(namespace string) RuleCheckerNamespaceLister
	RuleCheckerListerExpansion
}

// ruleCheckerLister implements the RuleCheckerLister interface.
type ruleCheckerLister struct {
	indexer cache.Indexer
}

// NewRuleCheckerLister returns a new RuleCheckerLister.
func NewRuleCheckerLister(indexer cache.Indexer) RuleCheckerLister {
	return &ruleCheckerLister{indexer: indexer}
}

// List lists all RuleCheckers in the indexer.
func (s *ruleCheckerLister) List(selector labels.Selector) (ret []*v1alpha1.RuleChecker, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RuleChecker))
	})
	return ret, err
}

// RuleCheckers returns an object that can list and get RuleCheckers.
func (s *ruleCheckerLister) RuleCheckers(namespace string) RuleCheckerNamespaceLister {
	return ruleCheckerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RuleCheckerNamespaceLister helps list and get RuleCheckers.
type RuleCheckerNamespaceLister interface {
	// List lists all RuleCheckers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.RuleChecker, err error)
	// Get retrieves the RuleChecker from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.RuleChecker, error)
	RuleCheckerNamespaceListerExpansion
}

// ruleCheckerNamespaceLister implements the RuleCheckerNamespaceLister
// interface.
type ruleCheckerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RuleCheckers in the indexer for a given namespace.
func (s ruleCheckerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RuleChecker, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RuleChecker))
	})
	return ret, err
}

// Get retrieves the RuleChecker from the indexer for a given namespace and name.
func (s ruleCheckerNamespaceLister) Get(name string) (*v1alpha1.RuleChecker, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rulechecker"), name)
	}
	return obj.(*v1alpha1.RuleChecker), nil
}
